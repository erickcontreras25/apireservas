// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reserva;

namespace Reserva.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20200531010848_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Reserva.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<decimal>("edad")
                        .HasColumnType("decimal");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("nombreUsuario")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Reserva.Models.Cancha", b =>
                {
                    b.Property<int>("idCancha")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("foto")
                        .HasColumnName("Imagen")
                        .HasColumnType("Image");

                    b.Property<int>("idComplejo")
                        .HasColumnName("idComplejo")
                        .HasColumnType("int");

                    b.Property<int>("precio")
                        .HasColumnName("Precio")
                        .HasColumnType("int");

                    b.Property<string>("tamanioCancha")
                        .HasColumnName("Tamanio")
                        .HasMaxLength(20);

                    b.HasKey("idCancha");

                    b.HasIndex("idComplejo");

                    b.ToTable("Cancha");
                });

            modelBuilder.Entity("Reserva.Models.Complejo", b =>
                {
                    b.Property<int>("idComplejo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("estado")
                        .HasColumnName("Estado")
                        .HasColumnType("bit");

                    b.Property<byte[]>("foto")
                        .HasColumnName("Imagen")
                        .HasColumnType("Image");

                    b.Property<DateTime>("horaCierre")
                        .HasColumnName("HoraCierre")
                        .HasColumnType("Datetime");

                    b.Property<DateTime>("horaInicio")
                        .HasColumnName("HoraInicio")
                        .HasColumnType("Datetime");

                    b.Property<float?>("latitud")
                        .HasColumnName("Latitud")
                        .HasColumnType("real");

                    b.Property<string>("localidad")
                        .HasColumnName("Localidad")
                        .HasMaxLength(20);

                    b.Property<float?>("longitud")
                        .HasColumnName("Longitud")
                        .HasColumnType("real");

                    b.Property<string>("nombre")
                        .HasColumnName("Nombre")
                        .HasMaxLength(20);

                    b.Property<string>("numero")
                        .HasColumnName("Numero")
                        .HasMaxLength(20);

                    b.Property<bool>("parqueo")
                        .HasColumnName("Parqueo")
                        .HasColumnType("bit");

                    b.Property<bool>("seguridad")
                        .HasColumnName("Seguridad")
                        .HasColumnType("bit");

                    b.Property<string>("userId")
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("idComplejo");

                    b.HasIndex("userId");

                    b.ToTable("Complejo");
                });

            modelBuilder.Entity("Reserva.Models.Equipo", b =>
                {
                    b.Property<int>("idEquipo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cantJugadores")
                        .HasColumnName("CantidadJug")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnName("Nombre")
                        .HasMaxLength(20);

                    b.Property<string>("userId")
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("idEquipo");

                    b.HasIndex("userId");

                    b.ToTable("Equipo");
                });

            modelBuilder.Entity("Reserva.Models.EquipoUser", b =>
                {
                    b.Property<int>("equipoId");

                    b.Property<string>("userId");

                    b.HasKey("equipoId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("EquipoUser");
                });

            modelBuilder.Entity("Reserva.Models.Reservaciones", b =>
                {
                    b.Property<int>("idReservacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("horaFinal")
                        .HasColumnName("HoraFinal")
                        .HasColumnType("Datetime");

                    b.Property<DateTime>("horaInicial")
                        .HasColumnName("HoraInicial")
                        .HasColumnType("Datetime");

                    b.Property<int>("idCancha")
                        .HasColumnName("idCancha")
                        .HasColumnType("int");

                    b.Property<bool>("pago")
                        .HasColumnName("Pago")
                        .HasColumnType("bit");

                    b.Property<bool>("pagoParcial");

                    b.Property<string>("userId")
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("idReservacion");

                    b.HasIndex("idCancha");

                    b.HasIndex("userId");

                    b.ToTable("Reservacion");
                });

            modelBuilder.Entity("Reserva.Models.Torneo", b =>
                {
                    b.Property<int>("idTorneo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("cantEquipos")
                        .HasColumnName("CantidadEquipos")
                        .HasColumnType("decimal");

                    b.Property<string>("descripcion")
                        .HasColumnName("Descripcion")
                        .HasMaxLength(20);

                    b.Property<DateTime>("diaTorneo")
                        .HasColumnName("DiaTorneo")
                        .HasColumnType("Datetime");

                    b.Property<int>("idComplejo")
                        .HasColumnName("idComplejo")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnName("Nombre")
                        .HasMaxLength(20);

                    b.Property<byte[]>("premioFoto")
                        .HasColumnName("PremioFoto")
                        .HasColumnType("Image");

                    b.Property<string>("usuarioId")
                        .HasColumnName("UsuarioId")
                        .HasMaxLength(450);

                    b.HasKey("idTorneo");

                    b.HasIndex("idComplejo");

                    b.ToTable("Torneo");
                });

            modelBuilder.Entity("Reserva.Models.TorneoEquipo", b =>
                {
                    b.Property<int>("torneoId");

                    b.Property<int>("equipoId");

                    b.HasKey("torneoId", "equipoId");

                    b.HasIndex("equipoId");

                    b.ToTable("TorneoEquipo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reserva.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reserva.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Reserva.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reserva.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reserva.Models.Cancha", b =>
                {
                    b.HasOne("Reserva.Models.Complejo", "complejo")
                        .WithMany()
                        .HasForeignKey("idComplejo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reserva.Models.Complejo", b =>
                {
                    b.HasOne("Reserva.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Reserva.Models.Equipo", b =>
                {
                    b.HasOne("Reserva.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Reserva.Models.EquipoUser", b =>
                {
                    b.HasOne("Reserva.Models.Equipo", "equipo")
                        .WithMany("equipoUser")
                        .HasForeignKey("equipoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Reserva.Models.ApplicationUser", "user")
                        .WithMany("equipoUser")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reserva.Models.Reservaciones", b =>
                {
                    b.HasOne("Reserva.Models.Cancha", "cancha")
                        .WithMany()
                        .HasForeignKey("idCancha")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Reserva.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Reserva.Models.Torneo", b =>
                {
                    b.HasOne("Reserva.Models.Complejo", "complejo")
                        .WithMany()
                        .HasForeignKey("idComplejo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reserva.Models.TorneoEquipo", b =>
                {
                    b.HasOne("Reserva.Models.Equipo", "equipo")
                        .WithMany("torneoEquipo")
                        .HasForeignKey("equipoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Reserva.Models.Torneo", "torneo")
                        .WithMany("torneoEquipo")
                        .HasForeignKey("torneoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
